General Principles:Use type>interface,avoid enum(use constmaps/arrays).Type args/returns explicitly.Avoid classes,use functional components/hooks.Prefer declarative logic.Descriptive names(isLoading,fetchUserData).Lowercase,dash-case dirs(components/auth-wizard).Named exports.Split into components,subcomponents,helpers,types,static-content.Error Handling:Use Zod forvalidation.Handle errors early with guards.Model API/server errors as types in tRPC.Use React Error Boundaries.UI/Styling:Use Shadcn UI,Radix,Tailwind(mobile-first).Spacing via gap(no margin).Optimize images(WebP,lazy-loading).Performance:Minimize'use client'(only small Web API components).Use RSC fordata fetching.Dynamic imports+Suspense.Optimize Web Vitals(LCP,CLS,FID).tRPC:Use createTRPCReact.Fetch data via trpc.useQuery()in RSC.Handle TRPCError with Zod/boundaries.Use inferRouterOutputs/Inputsfor type safety.Map API routes clearly to tRPC handlers.Key Rules:Use gap>margin.Minimize useEffect/setState.Follow Next.js docs.Use'nuqs'forURL params.Type trpcqueries/mutations.