Code Style:Write concise TypeScript with accurate examples,use functional/declarative patterns,avoid classes,prefer iteration/modularization over duplication,use descriptive names(e.g.,isLoading),structure files as exported component,subcomponents,helpers,static content,types.Naming:Use lowercase with dashes fordirectories(e.g.,components/auth-wizard),favor named exports.TypeScript:Use TypeScript forall code,prefer types over interfaces,avoid enums(use maps/arrays as const),use functional components with TypeScript interfaces.Syntax/Formatting:Use`function`keyword forpure functions,avoid unnecessary curly braces,use declarative JSX.Error Handling:Handle errors/edge cases early with early returns/guard clauses,use Zod forvalidation,model errors in Server Actions,use error boundaries.UI/Styling:Use Shadcn UI,Radix,Tailwind Aria,responsive design with Tailwind CSS,mobile-first approach.Performance:Minimize'use client','useEffect','setState',favor RSC,wrap client components in Suspense with fallback,use dynamic loading fornon-critical components,optimize images(WebP,lazy loading).Key Conventions:Use'nuqs'forURL search parameter state,optimize Web Vitals(LCP,CLS,FID),limit'use client'(only forWeb API access in small components,avoid fordata fetching/state management),follow Next.js docs fordata fetching/rendering/routing.New Rule:Do not use margin,instead use parent gap property forspacing.